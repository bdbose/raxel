import Head from 'next/head';
import { useEffect, useState } from 'react';
import '../styles/Home.module.css';
import { toPng } from 'html-to-image';

export default function Home() {
  const [row, setRow] = useState(10);
  const [data, setData] = useState([]);
  const getGrid = (clear = false) => {
    let a = [];
    for (let i = 0; i < row * row; i++) {
      a.push({
        color: !clear
          ? palette[Math.floor(Math.random() * palette.length)]
          : 'white',
      });
    }
    setData(a);
  };
  useEffect(() => {
    getGrid();
  }, []);
  const palette = [
    '#130f40',
    '#eb4d4b',
    '#7ed6df',
    '#f6e58d',
    '#dff9fb',
    '#e056fd',
    '#badc58',
    '#535c68',
    '#fff',
    '#ffbe76',
    '#6ab04c',
    '#686de0',
  ];
  const [color, setColor] = useState('#130f40');
  const [play, setPlay] = useState(false);

  return (
    <div
      className='App'
      style={{
        width: 'fit-content',
        margin: 'auto',
      }}>
      <Head>
        <title>RAXEL - Generate Random Pixel Art</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <h1>
        <center>RAXEL</center>
      </h1>
      <div
        className='grid-wrapper'
        style={{
          display: 'grid',
          gridTemplateColumns: `repeat(${row},30px)`,
          gap: '2px',
          background: 'black',
          width: `fit-content`,
          border: '2px solid black',
        }}>
        {data.map((ele, indx) => (
          <RowWrapper ele={ele} key={indx} row={row} color={color} />
        ))}
      </div>
      <h2>Color Palette</h2>
      <div
        className='color-palette'
        style={{
          display: 'grid',
          gridTemplateColumns: `repeat(${row},30px)`,
          gap: '2px',
          background: 'black',
          width: `fit-content`,
          border: '2px solid black',
        }}>
        {palette.map((ele) => {
          return (
            <div
              key={ele}
              onClick={() => {
                setColor(ele);
              }}
              style={{
                height: `30px`,
                width: `30px`,
                background: ele,
                cursor: 'pointer',
              }}></div>
          );
        })}
      </div>
      <div
        style={{
          display: 'flex',
          marginTop: '10px',
        }}>
        <button
          onClick={() => {
            getGrid(true);
          }}
          style={{
            flex: '1',
            background: '#3498db',
            border: 0,
            color: 'white',
            padding: '10px 0',
            borderTopLeftRadius: '6px',
            borderBottomLeftRadius: '6px',
          }}>
          Clear
        </button>
        <button
          style={{
            flex: '1',
            background: '#3498db',
            border: 0,
            color: 'white',
            padding: '10px 0',
          }}
          onClick={() => {
            getGrid();
          }}>
          Random
        </button>
        <button
          style={{
            flex: '1',
            background: '#3498db',
            border: 0,
            color: 'white',
            padding: '10px 0',
          }}
          onClick={() => {
            setPlay(!play);
            if (!play) {
              setInterval(getGrid, 500);
            } else {
              window.location.reload();
            }
          }}>
          {!play ? 'Play' : 'Stop'}
        </button>
        <button
          style={{
            flex: '1',
            background: '#3498db',
            border: 0,
            color: 'white',
            padding: '10px 0',
            borderTopRightRadius: '6px',
            borderBottomRightRadius: '6px',
          }}
          onClick={() => {
            const node = document.querySelector('.grid-wrapper');
            toPng(node)
              .then(function (dataUrl) {
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = dataUrl;
                a.setAttribute('download', 'pixel.png');
                document.body.appendChild(a);
                a.click();
              })
              .catch(function (error) {
                console.error('oops, something went wrong!', error);
              });
          }}>
          Download
        </button>
      </div>
      <footer
        style={{
          position: 'fixed',
          bottom: 0,
          left: '50%',
          transform: 'translate(-50%, -10px)',
        }}>
        Made by <a href='https://bdbose.tech/'>Bdbose</a>
      </footer>
    </div>
  );
}

const RowWrapper = ({ data, ele, color, setData }) => {
  return (
    <div
      style={{
        height: `30px`,
        width: `30px`,
        background: ele.color,
        cursor: 'pointer',
        transition: '0.5s linear',
      }}
      onClick={(e) => {
        e.target.style.background = color;
      }}
      className='block'></div>
  );
};
